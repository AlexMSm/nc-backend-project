/* formatComment = (username) => {
  console.log(username);
  return db
    .query("SELECT username, name FROM users WHERE username = $1;", [username])
    .then((response) => {
      return createRef(response.rows, "username", "name");
    });
};
//const userFormat = await formatComment(comment.username);
//comment["username"] = userFormat[comment.username]; */

describe("GET /api/articles/:article_id/comments - returns array of comments for an article - date DESC", () => {
  test("200: returns array of comment objects", () => {
    return request(app)
      .get("/api/articles/1/comments")
      .expect(200)
      .then((response) => {
        const { body } = response;
        expect(body).toHaveLength(11);
        let dateCheck = new Date("2100-01-01").getTime();
        body.forEach((comment) => {
          let epoch = new Date(comment.created_at).getTime();
          expect(epoch).toBeLessThan(dateCheck);
          dateCheck = epoch;
          expect(comment).toEqual(
            expect.objectContaining({
              comment_id: expect.any(Number),
              votes: expect.any(Number),
              created_at: expect.any(String),
              author: expect.any(String),
              body: expect.any(String),
            })
          );
        });
      });
  });
  test("404 - Not Found: should return error if no comments found", () => {
    return request(app)
      .get("/api/articles/2/comments")
      .expect(404)
      .then((response) => {
        const { body } = response;
        expect(body.msg).toBe("No comments found.");
      });
  });
  test("404 - Not Found: should return error for unmatched article id", () => {
    return request(app)
      .get("/api/articles/1000/comments")
      .expect(404)
      .then((response) => {
        const { body } = response;
        expect(body.msg).toBe("Article not found.");
      });
  });
  test("400 - Bad Request: should return error for incorrect article id", () => {
    return request(app)
      .get("/api/articles/articletest/comments")
      .expect(400)
      .then((response) => {
        const { body } = response;
        expect(body.msg).toBe("Bad request - Invalid article ID");
      });
  });
});

Request body accepts:

To make sure that an API can handle large amounts of data, it is often necessary to use **pagination**. Head over to [Google](https://www.google.co.uk/search?q=cute+puppies), and you will notice that the search results are broken down into pages. It would not be feasible to serve up _all_ the results of a search in one go. The same is true of websites / apps like Facebook or Twitter (except they hide this by making requests for the next page in the background, when we scroll to the bottom of the browser). We can implement this functionality on our `/api/articles` endpoint.

- Should accepts the following queries:
  - `limit`, which limits the number of responses (defaults to 10)
  - `p`, stands for page which specifies the page at which to start (calculated using limit)
- add a `total_count` property, displaying the total number of articles (**this should display the total number of articles with any filters applied, discounting the limit**)
